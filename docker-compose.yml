services:
  nginx:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME:-task_app}_nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./backend/public:/var/www/html/public
      - ./frontend/dist:/var/www/html/frontend
    depends_on:
      php:
        condition: service_healthy
      node:
        condition: service_started
    networks:
      - task_app_network
    restart: unless-stopped

  php:
    build:
      context: ./docker/php
      dockerfile: Dockerfile
      target: development
    container_name: ${COMPOSE_PROJECT_NAME:-task_app}_php
    ports:
      - "${PHP_XDEBUG_PORT:-9003}:9003"
    volumes:
      - ./backend:/var/www/html
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
    environment:
      APP_ENV: ${APP_ENV:-local}
      APP_DEBUG: ${APP_DEBUG:-true}
      DB_HOST: mysql
      DB_DATABASE: ${DB_DATABASE:-task_management}
      DB_USERNAME: ${DB_USERNAME:-laravel}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      XDEBUG_CONFIG: client_host=host.docker.internal
      PHP_IDE_CONFIG: serverName=localhost
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - task_app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "php-fpm", "--test"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  node:
    build:
      context: ./frontend
      dockerfile: ../docker/node/Dockerfile
      target: development
    container_name: ${COMPOSE_PROJECT_NAME:-task_app}_node
    ports:
      - "${REACT_DEV_PORT:-3000}:3000"
      - "${VITE_DEV_PORT:-5173}:5173"
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost/api}
    working_dir: /app
    command: npm run dev
    networks:
      - task_app_network
    restart: unless-stopped

  mysql:
    image: mysql:${MYSQL_VERSION:-8.0}
    container_name: ${COMPOSE_PROJECT_NAME:-task_app}_mysql
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_DATABASE:-task_management}
      MYSQL_USER: ${DB_USERNAME:-laravel}
      MYSQL_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - task_app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:${PHPMYADMIN_VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME:-task_app}_phpmyadmin
    ports:
      - "${PHPMYADMIN_PORT:-8080}:80"
    environment:
      PMA_HOST: mysql
      PMA_USER: ${DB_USERNAME:-laravel}
      PMA_PASSWORD: ${DB_PASSWORD:-password}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - task_app_network
    restart: unless-stopped

  redis:
    image: redis:${REDIS_VERSION:-7-alpine}
    container_name: ${COMPOSE_PROJECT_NAME:-task_app}_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - task_app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  mailhog:
    image: mailhog/mailhog:${MAILHOG_VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME:-task_app}_mailhog
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_UI_PORT:-8025}:8025"
    networks:
      - task_app_network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  node_modules:
    driver: local

networks:
  task_app_network:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME:-task_app}_network